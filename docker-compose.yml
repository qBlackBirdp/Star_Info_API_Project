version: '3.8'

networks:
  my_network:
    driver: bridge

services:
  app:
    build: .
    container_name: star-info-api-container_compose
    ports:
      - "5555:5000"
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app
      - FLASK_APP=run.py
      - CACHE_REDIS_HOST=redis_container
      - CACHE_REDIS_PORT=6379
#      - DB_TYPE=${DB_TYPE}  # DB 타입을 동적으로 설정
    volumes:
      - ./config.yml:/app/config.yml
    depends_on:
      mysql_db:
        condition: service_healthy
#      postgres_db:  # PostgreSQL도 의존 관계 추가
#        condition: service_healthy
      redis_container:
        condition: service_healthy
    networks:
      - my_network
    restart: always

  mysql_db:
    image: mariadb:10.4
    container_name: mysql_container
    ports:
      - "3307:3306"
    environment:
      MYSQL_ROOT_PASSWORD: "1234"
      MYSQL_DATABASE: STAR_INFO_API_DB
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p1234" ]
      interval: 10s
      retries: 3
    networks:
      - my_network

  redis_container:
    image: redis:latest
    container_name: redis_container
    ports:
      - "6379:6379"
    networks:
      - my_network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: always

#  postgres_db:
#    image: postgres:14
#    container_name: postgres_container
#    ports:
#      - "5432:5432"
#    environment:
#      POSTGRES_USER: postgres
#      POSTGRES_PASSWORD: "1234"
#      POSTGRES_DB: STAR_INFO_API_DB
#    volumes:
#      - postgres_data:/var/lib/postgresql/data
#    healthcheck:
#      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
#      interval: 10s
#      retries: 3
#    networks:
#      - my_network

volumes:
  mysql_data:
#  postgres_data:
